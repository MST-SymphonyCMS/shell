#!/usr/bin/env php
<?php

	function autoloadShellCommands($className){
		if(preg_match_all('/^Shell\\\\Command\\\\([^\\\\]+)\\\\(.+)$/i', $className, $matches) == 1){
			$command = $matches[2][0];
			$extension = $matches[1][0];
			$file = EXTENSIONS . "/{$extension}/bin/{$command}";
			if (is_readable($file)) {
				require $file;
			}
		}

		return;
	}

	function autoloadShellLib($className){
		$className = ltrim($className, '\\');
		$file = $namespace = NULL;

		if ($lastNsPos = strripos($className, '\\')) {
			$namespace = substr($className, 0, $lastNsPos);
			$className = substr($className, $lastNsPos + 1);
			$path  = str_replace('\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
		}

		$path = EXTENSIONS . DIRECTORY_SEPARATOR . strtolower($path);

		// Class
		$file = str_replace('_', DIRECTORY_SEPARATOR, $className) . '.class.php';
		if(is_readable($path . DIRECTORY_SEPARATOR . $file)){
			require $path . DIRECTORY_SEPARATOR . $file;
			return;
		}

		// Interface
		$file = str_replace('_', DIRECTORY_SEPARATOR, $className) . '.interface.php';
		if(is_readable($path . DIRECTORY_SEPARATOR . $file)){
			require $path . DIRECTORY_SEPARATOR . $file;
			return;
		}
	}

	spl_autoload_register("autoloadShellCommands");
	spl_autoload_register("autoloadShellLib");

	define('DOCROOT', rtrim(realpath(dirname(__FILE__) . '/../../../'), '/'));
	define('DOMAIN', NULL);

	// Include the engine
	require_once(DOCROOT . '/symphony/lib/boot/bundle.php');
	require_once(EXTENSIONS . '/shell/lib/Shell.class.php');

	// The first item in CLI args is just the path to this file, so ignore it.
	array_shift($argv);

	try {

		// Make sure the Shell has been initialised
		$engine = Shell::instance();
		$args = $engine->CLIArgs;

		$extension = NULL;
		if($args->find('e') !== false) $extension = $args->find('e')->value;
		elseif($args->find('extension') !== false) $extension = $args->find('extension')->value;

		$command = NULL;
		if($args->find('c') !== false) $command = $args->find('c')->value;
		elseif($args->find('command') !== false) $command = $args->find('command')->value;

		if(count($argv) == 0){
			echo "Below is a list of all available commands (use --usage
for details on executing a command):" . PHP_EOL . PHP_EOL;

			foreach(Shell::listCommands() as $name => $commands){
				echo "   {$name}" . PHP_EOL . "   ==========" . PHP_EOL;
				foreach($commands as $c){
					echo "      {$c}" . PHP_EOL;
				}
				echo PHP_EOL;
			}

			exit;
		}

		elseif(is_null($extension) && $args->find('usage') !== false){
			echo "	usage: symphony [OPTION...] -e EXTENSION -c COMMAND [args]
	runs command provided via extension.

	Should command be omitted, a list of commands available for that
	extension is displayed instead. Leaving out both command and extension
	will give a list of all commands available in the system.

	options:
		-t
			authentication token. Can be enabled via Symphony user
			profile. Not all extensions require authentication. Check
			individual extension commands for usage.

		-u
			User for login. Instead of using -t, it is possible
			to be authenticated with username and password. If -u is
			specified, password will be prompted for.

		-e, --extension
			Must specifiy the Symphony extension that provides the
			desired command.

		-c, --command
			The command you wish to run.

	examples:
		symphony -t 4141e465 -e shell -c test
		symphony -u fred --extension=shell --command=test" . PHP_EOL;

			exit();
		}


		if(is_null($extension)){
			throw new ShellException("No extension specified. A extension must be specified. See --usage for help.");
		}


		if(is_null($command)){

			echo "Below is a list of all available commands for
the extension {$extension}. (use --usage for details on
executing individual commands):" . PHP_EOL . PHP_EOL;

			array_map(
				function($c){ echo "   {$c}"  . PHP_EOL; return; },
				Shell::listCommands($extension)
			);
			echo PHP_EOL;
			exit;
		}

		if($args->find('u') !== false && $args->find('t') !== false){
			throw new ShellException("Does not make sense to specify both -t and -u.");
		}

		elseif($args->find('t') !== false){
			Shell::instance()->loginFromToken($args->find('t')->value);
			if(!Shell::instance()->isLoggedIn()){
				throw new ShellException("Error logging in. Authentication token supplied was invalid.");
			}
		}

		elseif($args->find('u') !== false){
			fputs(STDOUT, 'Password: ');
			$password = trim(fgets(STDIN, 256));

			Shell::instance()->login($args->find('u')->value, $password);
			if(!Shell::instance()->isLoggedIn()){
				throw new ShellException("Error logging in. Username and/or password were incorrect.");
			}
		}

		$path = EXTENSIONS . '/' . $extension . '/bin/'. $command;
		if($path == __FILE__){
			throw new ShellException("Cannot run 'symphony' as shell command.");
		}

		elseif(!file_exists($path) || !is_readable($path)){
			throw new ShellException("Specified command file, '{$extension}/bin/{$command}', is either non-existent or unreadable.");
		}

		$class = "\Shell\Command\\$extension\\$command";
		$obj = new $class;

	} catch (ShellException $e) {
		fputs(STDERR, $e->getMessage() . PHP_EOL);
		exit(1);
	}

	if($args->find('usage') !== false){
		echo $obj->usage() . PHP_EOL;
		exit;
	}

	$obj->run();
